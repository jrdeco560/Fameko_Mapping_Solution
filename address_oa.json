{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "#import str\n",
    "import re\n",
    "\n",
    "def translateName(rawname):\n",
    "    '''\n",
    "    A general purpose name expander.\n",
    "    '''\n",
    "    suffixlookup = {\n",
    "    'AVE':'Avenue',\n",
    "    'AVE.':'Avenue',\n",
    "    'CIR':'Circle',\n",
    "    'RD':'Road',\n",
    "    'RD.':'Road',\n",
    "    'EXT':'Extension',\n",
    "    'FRK':'Fork',\n",
    "    'ST':'Street',\n",
    "    'STR':'Street',\n",
    "    'PL':'Place',\n",
    "    'CRES':'Crescent',\n",
    "    'BLVD':'Boulevard',\n",
    "    'DR':'Drive',\n",
    "    'LN':'Lane',\n",
    "    'LN RD':'Lane Road',\n",
    "    'LANE':'Lane',\n",
    "    'LP':'Loop',\n",
    "    'CT':'Court',\n",
    "    'CRT':'Court',\n",
    "    'CR':'Creek',\n",
    "    'CRK':'Creek',\n",
    "    'GR':'Grove',\n",
    "    'CL':'Close',\n",
    "    'TER': 'Terrace',\n",
    "    'TRL':'Trail',\n",
    "    'AVE CT': 'Avenue Court',\n",
    "    'AVE PL': 'Avenue Place',\n",
    "    'ST CT': 'Street Court',\n",
    "    'ST PL': 'Street Place',\n",
    "    'HL': 'Hill',\n",
    "    'VW' : 'View',\n",
    "    'WY':'Way',\n",
    "    'PKY':'Parkway',\n",
    "    'PKWY':'Parkway',\n",
    "    'RWY':'Railway',\n",
    "    'DIV':'Diversion',\n",
    "    'HWY':'Highway',\n",
    "    'CONN': 'Connector',\n",
    "    'SR':'State Route'\n",
    "    }\n",
    "    \n",
    "    newName = ''\n",
    "    newName = suffixlookup.get(rawname.upper(),rawname.title())\n",
    "    return newName\n",
    "    \n",
    "def translateDir(rawname):\n",
    "    \n",
    "    suffixlookup = {\n",
    "    'E':'East',\n",
    "    'S':'South',\n",
    "    'N':'North',\n",
    "    'N.':'North',\n",
    "    'W':'West',\n",
    "    'SE':'Southeast',\n",
    "    'NE':'Northeast',\n",
    "    'SW':'Southwest',\n",
    "    'NW':'Northwest'}\n",
    "\n",
    "    newName = ''\n",
    "    newName = suffixlookup.get(rawname.upper(),rawname.title())\n",
    "    return newName\n",
    "\n",
    "    # expand street name field into pre_dir, street, type\n",
    "def expand_street(street_name_raw):\n",
    "    #street_name_array = attrs[street_name_raw].split(' ')\n",
    "    street_name_array = street_name_raw.split(' ')\n",
    "    street = ''\n",
    "    street_name = street_name_array[:-1]\n",
    "    # handles St Thomas Street case\n",
    "    street_type = translateName(street_name_array[-1])\n",
    "    # handle E St case, N 1st\n",
    "    if len(street_name_array) == 2:\n",
    "        street_name = street_name[0]\n",
    "        if re.search(r'^\\d', street_name) is not None:\n",
    "            street_next = street_name.lower()\n",
    "            street = street_next + ' ' + street_type\n",
    "        else:\n",
    "            street = street_name.title()\n",
    "            street = street + ' ' + street_type\n",
    "    # handle standard case\n",
    "    else:\n",
    "        for i in street_name:\n",
    "            if re.search(r'^\\d', i) is not None:\n",
    "                street_next = i.lower()\n",
    "                street = street + ' ' + street_next\n",
    "            else:\n",
    "                street_next = translateDir(i)\n",
    "                street = street + ' ' + street_next\n",
    "        street = street + ' ' + translateName(street_type)\n",
    "        street = street.lstrip()\n",
    "    return street\n",
    "\n",
    "# test cases\n",
    "# whatcom\n",
    "test_address = 'E ST'\n",
    "test_address2 = '11TH ST'\n",
    "test_address3 = 'E MARYLAND ST'\n",
    "test_address4 = 'E 2ND ST'\n",
    "test_address5 = 'ST PAUL ST'\n",
    "test_address6 = 'LIMERICK WAY'\n",
    "# yakima\n",
    "# McCracken Avenue\n",
    "test_address7 = 'MC CRACKEN AVE'\n",
    "test_address8 = '5TH AVE S APT 605'\n",
    "test_address9 = 'MAPLE AVE #9'\n",
    "test_address10 = 'S 65TH AVE UNITS 1-2'\n",
    "test_address11 = 'S 69TH AVE #AB'\n",
    "test_address12 = 'E E ST'\n",
    "test_address13 = 'E N ST'\n",
    "test_address14 = 'E S ST'\n",
    "''' S 5TH ST W\n",
    "1ST AVE WN\n",
    "'''\n",
    "\n",
    "\n",
    "def filterTags(attrs):\n",
    "    if not attrs:\n",
    "        return\n",
    "    # raw variables\n",
    "    address_number = 'number'\n",
    "    pre_dir_raw = ''\n",
    "    street_name_raw = 'street'\n",
    "    street_type_raw = ''\n",
    "    post_dir_raw = ''\n",
    "    city = 'city'\n",
    "    unit_raw = 'unit' # 'Apt'\n",
    "    postcode_raw = 'postcode'\n",
    "    # processed variables\n",
    "    addr = ''\n",
    "    pre_dir = ''\n",
    "    street_type = ''\n",
    "    post_dir = ''\n",
    "    tags = {}\n",
    "    if address_number in attrs and attrs[address_number] != '':\n",
    "        tags['addr:housenumber'] = attrs[address_number]\n",
    "    #if 'Unit' in attrs and attrs['Unit'] != '':\n",
    "    #   tags['addr:unit'] = attrs['Unit']\n",
    "    if pre_dir_raw in attrs and attrs[pre_dir_raw] != '':\n",
    "        pre_dir = translateName(attrs[pre_dir_raw])\n",
    "    '''if street_name_raw:\n",
    "        if re.search(r'^\\d', attrs[street_name_raw]) is not None:\n",
    "            street = attrs[street_name_raw].lower()\n",
    "        else:\n",
    "            street = attrs[street_name_raw].title()\n",
    "    '''\n",
    "    if post_dir_raw in attrs and attrs[post_dir_raw] != '':\n",
    "        post_dir = translateName(attrs[post_dir_raw])\n",
    "    '''if street_type_raw in attrs and attrs[street_type_raw] != '':\n",
    "        street_type = translateName(attrs[street_type_raw])\n",
    "    \n",
    "    if pre_dir:\n",
    "        addr = pre_dir + ' ' + street\n",
    "    else:\n",
    "        addr = street\n",
    "    if street_type:\n",
    "        addr = addr + ' ' + street_type\n",
    "    if post_dir:\n",
    "        addr = addr + ' ' + post_dir\n",
    "    '''\n",
    "    # split address at first '#', UNIT or APT and add that to unit\n",
    "    if street_name_raw in attrs and attrs[street_name_raw] != '':\n",
    "        tags['addr:street'] = attrs[street_name_raw]\n",
    "    if city in attrs and attrs[city] != '':\n",
    "        tags['addr:city'] = attrs[city].title()\n",
    "    if postcode_raw in attrs and attrs[postcode_raw] != '':\n",
    "        tags['addr:postcode'] = attrs[postcode_raw]\n",
    "\n",
    "    return tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
